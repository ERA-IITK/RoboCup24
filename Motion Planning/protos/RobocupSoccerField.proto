#VRML_SIM R2023b utf8
# license: Apache License 2.0
# license url: https://www.apache.org/licenses/LICENSE-2.0
# documentation url: https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/samples/contests/robocup/protos/RobocupSoccerField.proto
# keywords: exterior/sport
# Soccer field for the Robocup Middle Size League 2023.
# template language: javascript

EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/Grass.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/samples/contests/robocup/protos/RobocupGoal.proto"

PROTO RobocupSoccerField [
  field SFVec3f                     translation 0 0 0
  field SFRotation                  rotation    0 0 1 0
  field SFString                    name        "soccer_field"
  field SFString{"adult", "kid"}    size        "kid"
  field SFBool                      turfPhysics TRUE
]
{
  %<
    // Official soccer field dimensions from RoboCupMSL 2023 (in meters)
    
    // Important Parameters missing and need to be added:
    // 1. Currently the height of the goalpost is 1.25 m but needs to be 1m according to rulebook.
    // 2. Anything that is outside the field is not created. This corresponds to parameters M, N, O, P of the rulebook.
    // 3. Virtual Points corresponding to Q of the rulebook are not marked.
    // 4. The corner circles and penalty marks are drawn on top of the field as it was too much effort to modify the triangle structure for that. Hence while switching views it might seem that they disappear momentarily which is completely normal.
    
    const LINE_WIDTH = 0.125; // Line width corresponds to "K" of the rulebook
    const BRANCH_LENGTH = 0.15; // Length of one branch of the penalty/center mark corresponds to "J" of the rulebook
    const N_VERTICES_CIRCLE = 36; // Number of vertices for the regular polygon approximating the central circle (not specified in rules)

    let A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q;
    if (fields.size.value === 'adult') {
      // Local Competition dimensions
      A = 18; // Corresponds to "A" of the rulebook
      B = 12; // Corresponds to "B" of the rulebook
      C = 0.5; // Corresponds to width of the goalpost
      D = 2; // Corresponds to length of the goalpost
      E = 0.75; // Corresponds to "F" of the rulebook
      F = 3.5; // Corresponds to "D" of the rulebook
      G = 3; // Corresponds to "I" of the rulebook
      H = 4; // Corresponds to "H" of the rulebook
      I = 1; // Corresponds to "L" of the rulebook
      J = 2.25; // Corresponds to "E" of the rulebook
      K = 6.5; // Corresponds to "C" of the rulebook
      L = 0.75; // Corresponds to "G" of the rulebook
      M = 1; // Corresponds to "M" of the rulebook
      N = 6; // Corresponds to "N" of the rulebook
      O = 1; // Corresponds to "O" of the rulebook
      P = 0.5; // Corresponds to "P" of the rulebook
      Q = 3; // Corresponds to "Q" of the rulebook
    } else {
      // Official dimensions
      A = 22; // Corresponds to "A" of the rulebook
      B = 14; // Corresponds to "B" of the rulebook
      C = 0.5; // Corresponds to width of the goalpost
      D = 2.4; // Corresponds to length of the goalpost
      E = 0.75; // Corresponds to "F" of the rulebook
      F = 3.9; // Corresponds to "D" of the rulebook
      G = 3.6; // Corresponds to "I" of the rulebook
      H = 4; // Corresponds to "H" of the rulebook
      I = 1; // Corresponds to "L" of the rulebook
      J = 2.25; // Corresponds to "E" of the rulebook
      K = 6.9; // Corresponds to "C" of the rulebook
      L = 0.75; // Corresponds to "G" of the rulebook
      M = 1; // Corresponds to "M" of the rulebook
      N = 8; // Corresponds to "N" of the rulebook
      O = 1; // Corresponds to "O" of the rulebook
      P = 0.5; // Corresponds to "P" of the rulebook
      Q = 3.5; // Corresponds to "Q" of the rulebook
    }

    const DEPTH = fields.turfPhysics.value ? 0.01 : 0;

    // Points for a quarter field (except central circle)
    let pts = [];
    pts[0]  = {x: 0,                           y: 0,                               z: DEPTH}
    pts[1]  = {x: 0,                           y: I,                               z: DEPTH}
    pts[2]  = {x: 0,                           y: I + (B / 2),                     z: DEPTH}
    pts[3]  = {x: I,                           y: I,                               z: DEPTH}
    pts[4]  = {x: I,                           y: I + (B / 2),                     z: DEPTH}
    pts[5]  = {x: I + LINE_WIDTH,              y: I,                               z: DEPTH}
    pts[6]  = {x: I + LINE_WIDTH,              y: I + LINE_WIDTH,                  z: DEPTH}
    pts[7]  = {x: I + LINE_WIDTH,              y: I + ((B - K) / 2),               z: DEPTH}
    pts[8]  = {x: I + LINE_WIDTH,              y: I + ((B - K) / 2) + LINE_WIDTH,  z: DEPTH}
    pts[9]  = {x: I + LINE_WIDTH,              y: I + ((B - F) / 2),               z: DEPTH}
    pts[10] = {x: I + LINE_WIDTH,              y: I + ((B - F) / 2) + LINE_WIDTH,  z: DEPTH}
    pts[11] = {x: I + LINE_WIDTH,              y: I + (B / 2),                     z: DEPTH}
    pts[12] = {x: I + E - LINE_WIDTH,          y: I + ((B - F) / 2) + LINE_WIDTH,  z: DEPTH}
    pts[13] = {x: I + E - LINE_WIDTH,          y: I + (B / 2),                     z: DEPTH}
    pts[14] = {x: I + E,                       y: I + ((B - F) / 2),               z: DEPTH}
    pts[15] = {x: I + E,                       y: I + ((B - F) / 2) + LINE_WIDTH,  z: DEPTH}
    pts[16] = {x: I + E,                       y: I + (B / 2) - BRANCH_LENGTH,     z: DEPTH}
    pts[17] = {x: I + E,                       y: I + (B / 2),                     z: DEPTH}
    pts[18] = {x: I + G - BRANCH_LENGTH,       y: I + ((B - LINE_WIDTH) / 2),      z: DEPTH}
    pts[19] = {x: I + G - BRANCH_LENGTH,       y: I + (B / 2),                     z: DEPTH}
    pts[20] = {x: I + G - (LINE_WIDTH / 2),    y: I + (B / 2) - BRANCH_LENGTH,     z: DEPTH}
    pts[21] = {x: I + G - (LINE_WIDTH / 2),    y: I + ((B - LINE_WIDTH) / 2),      z: DEPTH}
    pts[22] = {x: I + G - (LINE_WIDTH / 2),    y: I + (B / 2),                     z: DEPTH}
    pts[23] = {x: I + G + (LINE_WIDTH / 2),    y: I + (B / 2) - BRANCH_LENGTH,     z: DEPTH}
    pts[24] = {x: I + G + (LINE_WIDTH / 2),    y: I + ((B - LINE_WIDTH) / 2),      z: DEPTH}
    pts[25] = {x: I + G + (LINE_WIDTH / 2),    y: I + (B / 2),                     z: DEPTH}
    pts[26] = {x: I + G + BRANCH_LENGTH,       y: I + ((B - LINE_WIDTH) / 2),      z: DEPTH}
    pts[27] = {x: I + G + BRANCH_LENGTH,       y: I + (B / 2),                     z: DEPTH}
    pts[28] = {x: I + J - LINE_WIDTH,          y: I + ((B - K) / 2) + LINE_WIDTH,  z: DEPTH}
    pts[29] = {x: I + J - LINE_WIDTH,          y: I + ((B - F) / 2),               z: DEPTH}
    pts[30] = {x: I + J - LINE_WIDTH,          y: I + (B / 2) - BRANCH_LENGTH,     z: DEPTH}
    pts[31] = {x: I + J - LINE_WIDTH,          y: I + (B / 2),                     z: DEPTH}
    pts[32] = {x: I + J,                       y: I + ((B - K) / 2),               z: DEPTH}
    pts[33] = {x: I + J,                       y: I + ((B - K) / 2) + LINE_WIDTH,  z: DEPTH}
    pts[34] = {x: I + J,                       y: I + (B / 2),                     z: DEPTH}
    pts[35] = {x: I + (A / 2) - BRANCH_LENGTH, y: I + ((B - LINE_WIDTH) / 2),      z: DEPTH}
    pts[36] = {x: I + (A / 2) - BRANCH_LENGTH, y: I + (B / 2),                     z: DEPTH}
    pts[37] = {x: I + ((A - LINE_WIDTH) / 2),  y: I,                               z: DEPTH}
    pts[38] = {x: I + ((A - LINE_WIDTH) / 2),  y: I + LINE_WIDTH,                  z: DEPTH}
    pts[39] = {x: I + ((A - LINE_WIDTH) / 2),  y: I + ((B - K) / 2),               z: DEPTH}
    pts[40] = {x: I + ((A - LINE_WIDTH) / 2),  y: I + ((B - LINE_WIDTH) / 2),      z: DEPTH}
    pts[41] = {x: I + ((A - LINE_WIDTH) / 2),  y: I + (B / 2),                     z: DEPTH}
    pts[42] = {x: I + (A / 2),                 y: 0,                               z: DEPTH}
    pts[43] = {x: I + (A / 2),                 y: I,                               z: DEPTH}
    pts[44] = {x: I + (A / 2),                 y: I + (B / 2),                     z: DEPTH}

    // Triangles for a quarter field (except central circle)
    // Triangles for grass
    let tg = [];

    tg[0]  = {a: 1,  b: 44, c: 43};
    tg[1]  = {a: 1,  b: 2,  c: 44};
    tg[2]  = {a: 2,  b: 5,  c: 4};
    tg[3]  = {a: 2,  b: 3,  c: 5};
    tg[4]  = {a: 7,  b: 40, c: 39};
    tg[5]  = {a: 7,  b: 8,  c: 40};
    tg[6]  = {a: 9,  b: 30, c: 29};
    tg[7]  = {a: 9,  b: 10, c: 30};
    tg[8]  = {a: 15, b: 31, c: 30};
    tg[9]  = {a: 15, b: 17, c: 31};
    tg[10] = {a: 11, b: 14, c: 13};
    tg[11] = {a: 11, b: 12, c: 14};
    tg[12] = {a: 17, b: 22, c: 21};
    tg[13] = {a: 17, b: 19, c: 22};
    tg[14] = {a: 17, b: 20, c: 19};
    tg[15] = {a: 17, b: 18, c: 20};
    tg[16] = {a: 24, b: 25, c: 31};
    tg[17] = {a: 25, b: 27, c: 31};
    tg[18] = {a: 27, b: 28, c: 31};
    tg[19] = {a: 28, b: 32, c: 31};

    // Triangles for lines
    let tl = [];

    tl[0]  = {a: 6,  b: 39, c: 38};
    tl[1]  = {a: 6,  b: 7,  c: 39};
    tl[2]  = {a: 4,  b: 12, c: 6};
    tl[3]  = {a: 4,  b: 5,  c: 12};
    tl[4]  = {a: 38, b: 45, c: 44};
    tl[5]  = {a: 38, b: 42, c: 45};
    tl[6]  = {a: 8,  b: 34, c: 33};
    tl[7]  = {a: 8,  b: 9,  c: 34};
    tl[8]  = {a: 29, b: 35, c: 34};
    tl[9]  = {a: 29, b: 32, c: 35};
    tl[10] = {a: 10, b: 16, c: 15};
    tl[11] = {a: 10, b: 11, c: 16};
    tl[12] = {a: 13, b: 18, c: 16};
    tl[13] = {a: 13, b: 14, c: 18};
    tl[14] = {a: 19, b: 23, c: 22};
    tl[15] = {a: 19, b: 20, c: 23};
    tl[16] = {a: 21, b: 26, c: 24};
    tl[17] = {a: 21, b: 23, c: 26};
    tl[18] = {a: 25, b: 28, c: 27};
    tl[19] = {a: 25, b: 26, c: 28};
    tl[20] = {a: 36, b: 42, c: 41};
    tl[21] = {a: 36, b: 37, c: 42};

    // Creation of a quarter of the central circle
    const n_vertices_quarter = Math.ceil(N_VERTICES_CIRCLE / 4) + 1; // +1 because we want to have a point both at ~0 and pi/2

    // Add points for the circles to the existing ones
    function circle_add_pts (radius, pts, n_vertices_quarter, line_width) {
      const center = pts[44];
      let alpha = Math.atan((line_width / 2) / radius); // First point must be on the inside side of the half line
      const alpha_increment = (Math.PI / 2 - alpha) / (n_vertices_quarter - 1); // Number of parts is nb of vertices minus 1
      const Npts = pts.length;
      for (let i = 1; i <= n_vertices_quarter; ++i) {
        pts.push({x: center.x - radius * Math.sin(alpha), y: center.y - radius * Math.cos(alpha), z: center.z + 0});
        alpha = alpha + alpha_increment;
      }
    }

    circle_add_pts(H / 2, pts, n_vertices_quarter, LINE_WIDTH); // Inner radius of central circle
    circle_add_pts(H / 2 + LINE_WIDTH, pts, n_vertices_quarter, LINE_WIDTH); // Outer radius of central circle

    // Add the triangles for the line of the central circle
    let Npts = pts.length;
    let cin_start = Npts - 2 * n_vertices_quarter; // Id of the first point of the inner circle
    let cout_start = Npts - n_vertices_quarter; // Id of the first point of the outer circle
    for (let i = 1; i <= n_vertices_quarter - 1; ++i) {
      tl.push({a: cout_start + (i + 1), b: cin_start + i, c: cout_start + i}); // First part of one line rectangle
      tl.push({a: cout_start + (i + 1), b: cin_start + (i + 1), c: cin_start + i}); // Second part of one line rectangle
    }

    // Add the triangles for the grass boundaries of the central circle
    cin_start = Npts - 2 * n_vertices_quarter;
    cout_start = Npts - n_vertices_quarter;

    // External triangles
    tg.push({a: 33, b: cout_start + 1, c: 40}) // adds first triangle (boundary with half line)
    for (let i = 1; i <= n_vertices_quarter - 1; ++i)
      tg.push({a: 33, b: cout_start + (i + 1), c: cout_start + i});

    tg.push({a: 33, b: 35, c: cout_start + n_vertices_quarter}); // Adds last triangle (boundary with penalty area and touch line)

    // Internal triangles
    // There is a vertex junction_index of the inner circle (cin) that makes the junction between triangles
    // going through pt.40 (top vertex of central dash) and pt.35 (bottom vertex of central dash).
    // It is located at approximately two thirds of the quarter
    const junction_index = Math.ceil((2 / 3) * n_vertices_quarter); // Index of the junction triangle within the inner circle
    for (let i = 1; i <= junction_index - 1; ++i)
      tg.push({a: cin_start + (i + 1), b: 41, c: cin_start + i});

    tg.push({a: cin_start + junction_index, b: 36, c: 41}); // Adds junction triangle
    for (let i = junction_index; i <= n_vertices_quarter - 1; ++i)
      tg.push({a:cin_start + (i + 1), b: 36, c: cin_start + i});
    tg.push({a: cin_start + n_vertices_quarter, b: 37, c: 36}); // Adds touch line triangle (boundary with touch line)

    // Although the corner circles should have been added by modifying the triangle structure of the arena, it was too much work and hence we drew the corners 0.00025 m above the original field.
    function corner_circle_add_pts (radius, pts, n_vertices_quarter, line_width) {
      const center = pts[3];
      let alpha = Math.atan((line_width / 2) / radius); // First point must be on the inside side of the half line
      const alpha_increment = (Math.PI / 2 - alpha) / (n_vertices_quarter - 1); // Number of parts is nb of vertices minus 1
      const Npts = pts.length;
      for (let i = 1; i <= n_vertices_quarter; ++i) {
        pts.push({x: center.x + radius * Math.sin(alpha), y: center.y + radius * Math.cos(alpha), z: center.z + 0.00025});
        alpha = alpha + alpha_increment;
      }
    }
    corner_circle_add_pts(L, pts, n_vertices_quarter, LINE_WIDTH); // Inner radius of central circle
    corner_circle_add_pts(L + LINE_WIDTH, pts, n_vertices_quarter, LINE_WIDTH); // Outer radius of central circle
    Npts = pts.length;
    cin_start = Npts - 2 * n_vertices_quarter; // Id of the first point of the inner circle
    cout_start = Npts - n_vertices_quarter; // Id of the first point of the outer circle
    for (let i = 1; i <= n_vertices_quarter - 1; ++i) {
      tl.push({a: cout_start + (i + 1), b: cin_start + i, c: cout_start + i}); // First part of one line rectangle
      tl.push({a: cout_start + (i + 1), b: cin_start + (i + 1), c: cin_start + i}); // Second part of one line rectangle
    }

    // Replication of the other 3 quarters
    for (let i = 0; i < Npts; ++i) {
      const pt_ref = pts[i]; // Reference point
      // 2nd Quarter (which completes one team's half)
      pts[Npts + i] = {x: pt_ref.x, y: 2 * I + B - pt_ref.y, z: pt_ref.z};
      // 3rd Quarter (replication on the y-axis)
      pts[2 * Npts + i] = {x: 2 * I + A - pt_ref.x, y: pt_ref.y, z: pt_ref.z};
      // 4th Quarter (which completes opponent's half)
      pts[3 * Npts + i] = {x: 2 * I + A - pt_ref.x, y: 2 * I + B - pt_ref.y, z: pt_ref.z};
    }

    const Ntg = tg.length;
    for (let i = 0; i < Ntg; ++i) { // Grass triangles
      const tg_ref = tg[i];
      // Due to axis reversions, we have to update the order of coords for the new corresp. triangles
      tg[Ntg + i] = {a: tg_ref.b + Npts, b: tg_ref.a + Npts, c: tg_ref.c + Npts} // 2nd Quarter (bac)
      tg[2 * Ntg + i] = {a: tg_ref.c + 2 * Npts, b: tg_ref.b + 2 * Npts, c: tg_ref.a + 2 * Npts}; // 3rd Quarter (cba)
      tg[3 * Ntg + i] = {a: tg_ref.c + 3 * Npts, b: tg_ref.a + 3 * Npts, c: tg_ref.b + 3 * Npts}; // 3rd Quarter (cab)
    }

    const Ntl = tl.length;
    for (let i = 0; i < Ntl; ++i) { // Same for the line triangles
      const tl_ref = tl[i];
      tl[Ntl + i] = {a: tl_ref.b + Npts, b: tl_ref.a + Npts, c: tl_ref.c + Npts};
      tl[2 * Ntl + i] = {a: tl_ref.c + 2 * Npts, b: tl_ref.b + 2 * Npts, c: tl_ref.a + 2 * Npts};
      tl[3 * Ntl + i] = {a: tl_ref.c + 3 * Npts, b: tl_ref.a + 3 * Npts, c: tl_ref.b + 3 * Npts};
    }

    // Offset to have origin on the center of the field
    const OFFSET_X = (2 * I + A) / 2;
    const OFFSET_Y = (2 * I + B) / 2;
    Npts = pts.length;
    for (let i = 0; i < Npts; ++i) {
      pts[i].x = pts[i].x - OFFSET_X;
      pts[i].y = pts[i].y - OFFSET_Y;
    }
  >%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      %< if (fields.turfPhysics.value) { >%
      DEF BLADES Solid {
        contactMaterial "grass"
        translation 0 0 0.01
        boundingObject Plane {
          size %<= 2 * I + A >% %<= 2 * I + B >%
        }
      }
      %< } >%
      DEF GRASS Shape {
        appearance Grass {
          colorOverride 0.6 1 0.3
          type "artificial"
          textureTransform TextureTransform {
            scale %<= 2 * A >% %<= 2 * A >%
          }
        }
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
             %< for (let i = 0; i < pts.length; ++i) { >%
                %<= pts[i].x >% %<= pts[i].y >% %<= pts[i].z >%
             %< } >%
            ]
          }
          ccw FALSE
          coordIndex [ # v.X - 1 because coordIndex starts at 0, while the points (defined in Lua) start at 1
            %< for (let i = 0; i < tg.length; ++i) { >%
               %<= tg[i].a - 1 >% %<= tg[i].b - 1 >% %<= tg[i].c - 1 >% -1,
            %< } >%
          ]
        }
      }
      DEF LINES Shape {
        appearance Grass {
          colorOverride 1 1 1
          type "artificial_white"
          IBLStrength 1.5
          textureTransform TextureTransform {
            scale %<= 2 * A >% %<= 2 * A >%
          }
        }
        geometry IndexedFaceSet {
          coord Coordinate {
            point [
             %< for (let i = 0; i < pts.length; ++i) { >%
                %<= pts[i].x >% %<= pts[i].y >% %<= pts[i].z >%
             %< } >%
            ]
          }
          ccw FALSE
          coordIndex [ # v.X - 1 because coordIndex starts at 0, while the points (defined in Lua) start at 1
            %< for (let i = 0; i < tl.length; ++i) { >%
               %<= tl[i].a - 1 >% %<= tl[i].b - 1 >% %<= tl[i].c - 1 >% -1
            %< } >%
          ]
        }
      }
      RobocupGoal {
        translation %<= I - OFFSET_X >% %<= I + (B / 2) - OFFSET_Y >% 0
        size IS size
        name "goal_home"
      }
      RobocupGoal {
        translation %<= I + A - OFFSET_X >% %<= I + (B / 2) - OFFSET_Y >% 0
        rotation 0 0 1 3.14159
        size IS size
        name "goal_away"
      }
    ]
    boundingObject Pose {
      children [
        Shape {
          geometry Plane {
            size %<= 2 * I + A >% %<= 2 * I + B >%
          }
        }
      ]
    }
  }
}
